//Undirected graph using imported json for number of states
//https://www.d3indepth.com/force-layout/ <--- source
//https://observablehq.com/@d3/mobile-patent-suits <--- source
//add animation
//dynamic width

%%javascript
$.getJSON("nodes.json", function(jsonnodes) {
$.getJSON("links.json", function(jsonlinks) {
    var nodes = jsonnodes;
    var links = jsonlinks;
    (function(element) {
        require(['d3'], function(d3) {
            var width = 800, height = 800
            
            var types = Array.from(new Set(links.map(d => d.type)));
               
            var color = d3.scaleOrdinal(types,d3.schemeCategory10);        
            
            var svg = d3.select(element.get(0))
                        .append('svg')
                        .attr('width', width)
                        .attr('height', height);

            var arrows = svg.selectAll('.arrows')
                        .data(types)
                        .enter()
                        .append("g")
                        
                arrows.append("defs")
                        .append("marker")
                        .attr("id", d =>`arrow-${d}`)
                        .attr("viewBox", "0 -10 20 20")
                        .attr("refX", 35)
                        .attr("refY", -0.5)
                        .attr("markerWidth", 6)
                        .attr("markerHeight", 6)
                        .attr("orient", "auto-start-reverse")
                      .append("path")
                        .attr("fill", color)
                        .attr("d", "M0,-10L20,0L0,10");
            
            var simulation = d3.forceSimulation(nodes)
                        .force('charge', d3.forceManyBody().strength(-500))
                        .force('center', d3.forceCenter(width / 2, height / 2))
                        .force('link', d3.forceLink().links(links).distance(300))
                        .on('tick', ticked);          
            
            var link = svg.selectAll('link')
                       .data(links)
                       .enter()
                       .append('path')
                       .attr('stroke', d => color(d.type))
                       .attr('stroke-width', 3)
                       .attr('marker-end', d => `url(${new URL(`#arrow-${d.type}`,location)})`)
                           .attr('stroke-width',2)
                        .attr('fill', 'none');
            
            var node = svg.append("g")
                       .selectAll('circle')
                       .data(nodes)
                       .enter()
                       .append("g")
            
                   node.append('circle')
                       .attr('fill',d => color(d.type))
                       .attr('stroke','white')
                       .attr('stroke-width',2)
                       .attr("stroke-linecap", "round")
                       .attr("stroke-linejoin", "round")
                       .attr('r', 25);
            
                   node.append("text")
                       .attr("x", -8)
                       .attr("y", "0.31em")
                       .attr('font-size',23)
                       .attr('fill', 'white')
                       .attr('stroke-width',2)
                       .attr('font-weight','bold')
                       .text(d=>d.name);
            
            function linkArc(d) {
                        if (d.source == d.target) {
                      const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
                      return `
                            M${d.source.x},${d.source.y+5}
                            C${d.source.x+100},${d.source.y+100} ${d.source.x+100},${d.source.y-100} ${d.target.x},${d.target.y-5}
                      `;
                        } else {
                      const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);
                      return `
                            M${d.source.x},${d.source.y}
                            A${r},${r} 0 0,1 ${d.target.x},${d.target.y}
                      `;      
                        }};
            
            function ticked() {
                node.attr("transform", d => `translate(${d.x},${d.y})`);
                
                   link.attr("d", linkArc)
                       .attr("opacity",0.5)
                       .attr("stroke-width",4);
            }
        });
    })(element);
})})
